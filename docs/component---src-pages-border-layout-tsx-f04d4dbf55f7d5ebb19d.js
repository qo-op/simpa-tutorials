"use strict";(self.webpackChunksimpa_tutorials=self.webpackChunksimpa_tutorials||[]).push([[747],{8958:function(e,t,n){n.r(t);var a=n(4578),l=n(7294),r=n(7780),o=n(2978),c=n(4239),i=n(2178);let d=function(e){function t(){for(var t,n=arguments.length,a=new Array(n),d=0;d<n;d++)a[d]=arguments[d];return(t=e.call.apply(e,[this].concat(a))||this).render=()=>l.createElement(c.Z,{pageTitle:"How to Use BorderLayout\nwith HTML and CSS"},l.createElement("p",null,l.createElement("code",null,"BorderLayout")," is a type of layout manager that is used to arrange and organize components in a container. It divides the container into five regions: ",l.createElement("code",null,"page-start")," (north),"," ",l.createElement("code",null,"page-end")," (south), ",l.createElement("code",null,"line-start")," (west),"," ",l.createElement("code",null,"line-end")," (east) and ",l.createElement("code",null,"center"),"."),l.createElement("div",{className:"BorderLayout",style:{height:"8rem"}},l.createElement("button",{"data-constraints":"page-start"},"page-start"),l.createElement("button",{"data-constraints":"line-start"},"line-start"),l.createElement("button",null,"center"),l.createElement("button",{"data-constraints":"line-end"},"line-end"),l.createElement("button",{"data-constraints":"page-end"},"page-end")),l.createElement("p",null,"When components are added to a container with"," ",l.createElement("code",null,"BorderLayout"),", they are placed in one of these five regions according to the rules of the layout. The"," ",l.createElement("code",null,"page-start")," region is placed at the top, the"," ",l.createElement("code",null,"page-end")," region at the bottom, the"," ",l.createElement("code",null,"line-start")," region on the left side, the"," ",l.createElement("code",null,"line-end")," region on the right side and the"," ",l.createElement("code",null,"center")," region in the middle."),l.createElement("p",null,"The components placed in the ",l.createElement("code",null,"page-start")," and"," ",l.createElement("code",null,"page-end")," regions are sized to their preferred height and stretched to the full width of the container. The components placed in the ",l.createElement("code",null,"line-start")," and ",l.createElement("code",null,"line-end")," regions are sized to their preferred width and stretched to the full height of the container. The component placed in the ",l.createElement("code",null,"center")," region is stretched to fill the remaining space in the container."),l.createElement("hr",null),l.createElement("h2",null,"Example with two components"),l.createElement("p",null,"Here's an example of using ",l.createElement("code",null,"BorderLayout")," to create a simple user interface with a text and a button:"),l.createElement(r.Z,{language:"xml",style:o.Z,wrapLongLines:!0},'...\n<div class="BorderLayout">\n  <span data-constraints="page-start">Hello, World!</span>\n  <button>Click me!</button>\n</div>\n...'),l.createElement("p",null,"In a BorderLayout, if no ",l.createElement("code",null,"data-constraints")," is specified for a component, then the component is placed in the"," ",l.createElement("code",null,"center")," region by default."),l.createElement("p",null,"In this example, we create a ",l.createElement("code",null,"div")," and set its"," ",l.createElement("code",null,"class")," to ",l.createElement("code",null,'"BorderLayout"'),". We then add a"," ",l.createElement("code",null,"span"),' that says "Hello, World!" to the'," ",l.createElement("code",null,"page-start")," region of the ",l.createElement("code",null,"div"),". We add a"," ",l.createElement("code",null,"button"),' with the text "Click me!" to the ',l.createElement("code",null,"div"),", without any ",l.createElement("code",null,"data-constraints"),". Since we didn't specify any"," ",l.createElement("code",null,"data-constraints"),", the ",l.createElement("code",null,"button")," is automatically placed in the center region of the ",l.createElement("code",null,"div"),"."),l.createElement("p",null,"When we run this code, we will see a panel with the text at the top and the button in the center, like this:"),l.createElement("div",{className:"BorderLayout",style:{backgroundColor:"lightgray"}},l.createElement("span",{"data-constraints":"page-start"},"Hello, World!"),l.createElement("button",null,"Click me!")),l.createElement("p",null),l.createElement("hr",null),l.createElement("h2",null,"Adding gaps"),l.createElement("p",null,"To create gaps between components in ",l.createElement("code",null,"BorderLayout"),", you can add a margin to the component placed in the ",l.createElement("code",null,"center")," ","region. For example, if you want to create a gap between a component in the ",l.createElement("code",null,"page-start")," region and a component in the"," ",l.createElement("code",null,"center")," region, you can add a margin to the"," ",l.createElement("code",null,"center")," component."),l.createElement(r.Z,{language:"xml",style:o.Z,wrapLongLines:!0},'...\n<div class="BorderLayout">\n  <button data-constraints="page-start">Button 1</button>\n  <button style="margin-block-start: 5px">Button 2</button>\n</div>\n...'),l.createElement("p",null,"After running this code, we will see a panel with two buttons."),l.createElement("div",{className:"BorderLayout",style:{backgroundColor:"lightgray"}},l.createElement("button",{"data-constraints":"page-start"},"Button 1"),l.createElement("button",{style:{marginBlockStart:"5px"}},"Button 2")),l.createElement("p",null),l.createElement(i.Z,null),l.createElement("p",null)),t}return(0,a.Z)(t,e),t}(l.Component);t.default=d}}]);
//# sourceMappingURL=component---src-pages-border-layout-tsx-f04d4dbf55f7d5ebb19d.js.map